worker_processes auto;

events {
    worker_connections 1024;
}

http {
    resolver    127.0.0.11 valid=30s;

    server {
        listen 8080;
        server_name _;

        proxy_http_version  1.1;
        proxy_set_header    Host               $host;
        proxy_set_header    X-Real-IP          $remote_addr;
        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host   $host;
        proxy_set_header    X-Forwarded-Server $host;
        proxy_set_header    X-Forwarded-Port   $server_port;
        proxy_set_header    X-Forwarded-Proto  $scheme;

        location ^~ / {
            proxy_pass      http://host.docker.internal:3000/;
        }

        location ^~ /taskmanager/ {
            proxy_pass      http://host.docker.internal:9100/;
        }

        location ^~ /orderProcess/ {
            proxy_pass      http://host.docker.internal:9101/;
        }

        # location ^~ /paymentProcess/ {
        #     proxy_pass     http://host.docker.internal:9102;
        # }

        location ^~ /getMetadata {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"

                local uris = {
                    "http://host.docker.internal:9101/getId",
                    -- Add more URIs as needed
                }

                local responses = {}
                local httpc = http.new()

                for _, uri in ipairs(uris) do
                    local res, err = httpc:request_uri(uri, {
                        method = "GET",
                        headers = {
                            ["Content-Type"] = "application/json",
                        },
                    })

                    if res then
                        table.insert(responses, res.body)
                    else
                        ngx.log(ngx.ERR, "Failed to request URI ", uri, ": ", err)
                        table.insert(responses, '{"error": "Failed to request URI"}')  -- Handle error response
                    end
                end

                ngx.status = 200
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(responses))
            }
        }
    }
}