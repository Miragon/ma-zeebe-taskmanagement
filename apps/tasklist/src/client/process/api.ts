/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration.ts";
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    serializeDataIfNeeded,
    setSearchParams,
    toPathString,
} from "./common.ts";
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap, RequestArgs, RequiredError } from "./base.ts";
import { CompleteTaskDto } from "../generated/processModels/models/CompleteTaskDto.ts";
import { UserTaskDto } from "../generated/processModels/models/UserTaskDto.ts";
import { TaskIdDto } from "../generated/processModels/models/TaskIdDto.ts";
import { LoadData200Response } from "../generated/processModels/models/LoadData200Response.ts";
import { MessageDto } from "../generated/processModels/models/MessageDto.ts";


/**
 * CompleteTaskControllerApi - axios parameter creator
 * @export
 */
export const CompleteTaskControllerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTask: async (completeTaskDto: CompleteTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeTaskDto' is not null or undefined
            assertParamExists("completeTask", "completeTaskDto", completeTaskDto);
            if (!options.url) {
                throw new RequiredError("url");
            }
            const localVarUrlObj = new URL(options.url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(completeTaskDto, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (completeTaskDto: CompleteTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeTaskDto' is not null or undefined
            assertParamExists("updateTask", "completeTaskDto", completeTaskDto);
            if (!options.url) {
                throw new RequiredError("url");
            }
            const localVarUrlObj = new URL(options.url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(completeTaskDto, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * CompleteTaskControllerApi - functional programming interface
 * @export
 */
export const CompleteTaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompleteTaskControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeTask(completeTaskDto: CompleteTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskIdDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeTask(completeTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["CompleteTaskControllerApi.completeTask"]?.[localVarOperationServerIndex]?.url;
            return (axios) => createRequestFunction(localVarAxiosArgs, globalAxios)(axios);
        },
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(completeTaskDto: CompleteTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskIdDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(completeTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["CompleteTaskControllerApi.updateTask"]?.[localVarOperationServerIndex]?.url;
            return (axios) => createRequestFunction(localVarAxiosArgs, globalAxios)(axios);
        },
    };
};

/**
 * CompleteTaskControllerApi - factory interface
 * @export
 */
export const CompleteTaskControllerApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompleteTaskControllerApiFp(configuration);
    return {
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTask(completeTaskDto: CompleteTaskDto, options?: any): AxiosPromise<TaskIdDto> {
            return localVarFp.completeTask(completeTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CompleteTaskDto} completeTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(completeTaskDto: CompleteTaskDto, options?: any): AxiosPromise<TaskIdDto> {
            return localVarFp.updateTask(completeTaskDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompleteTaskControllerApi - object-oriented interface
 * @export
 * @class CompleteTaskControllerApi
 * @extends {BaseAPI}
 */
export class CompleteTaskControllerApi extends BaseAPI {
    /**
     *
     * @param {CompleteTaskDto} completeTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompleteTaskControllerApi
     */
    public completeTask(completeTaskDto: CompleteTaskDto, options?: RawAxiosRequestConfig) {
        return CompleteTaskControllerApiFp(this.configuration).completeTask(completeTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {CompleteTaskDto} completeTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompleteTaskControllerApi
     */
    public updateTask(completeTaskDto: CompleteTaskDto, options?: RawAxiosRequestConfig) {
        return CompleteTaskControllerApiFp(this.configuration).updateTask(completeTaskDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoadTaskControllerApi - axios parameter creator
 * @export
 */
export const LoadTaskControllerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {UserTaskDto} userTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData: async (userTaskDto: UserTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userTaskDto' is not null or undefined
            assertParamExists("loadData", "userTaskDto", userTaskDto);
            if (!options.url) {
                throw new RequiredError("url");
            }
            const localVarUrlObj = new URL(options.url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userTaskDto, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * LoadTaskControllerApi - functional programming interface
 * @export
 */
export const LoadTaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoadTaskControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {UserTaskDto} userTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadData(userTaskDto: UserTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadData(userTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["LoadTaskControllerApi.loadData"]?.[localVarOperationServerIndex]?.url;
            return (axios) => createRequestFunction(localVarAxiosArgs, globalAxios)(axios);
        },
    };
};

/**
 * LoadTaskControllerApi - factory interface
 * @export
 */
export const LoadTaskControllerApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoadTaskControllerApiFp(configuration);
    return {
        /**
         *
         * @param {UserTaskDto} userTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData(userTaskDto: UserTaskDto, options?: any): AxiosPromise<LoadData200Response> {
            return localVarFp.loadData(userTaskDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoadTaskControllerApi - object-oriented interface
 * @export
 * @class LoadTaskControllerApi
 * @extends {BaseAPI}
 */
export class LoadTaskControllerApi extends BaseAPI {
    /**
     *
     * @param {UserTaskDto} userTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadTaskControllerApi
     */
    public loadData(userTaskDto: UserTaskDto, options?: RawAxiosRequestConfig) {
        return LoadTaskControllerApiFp(this.configuration).loadData(userTaskDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StartProcessControllerApi - axios parameter creator
 * @export
 */
export const StartProcessControllerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadForm: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (!options.url) {
                throw new RequiredError("url");
            }
            const localVarUrlObj = new URL(options.url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists("startProcess", "body", body);
            if (!options.url) {
                throw new RequiredError("url");
            }
            const localVarUrlObj = new URL(options.url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * StartProcessControllerApi - functional programming interface
 * @export
 */
export const StartProcessControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StartProcessControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadForm(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadForm(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["StartProcessControllerApi.loadForm"]?.[localVarOperationServerIndex]?.url;
            return (axios) => createRequestFunction(localVarAxiosArgs, globalAxios)(axios);
        },
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startProcess(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startProcess(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap["StartProcessControllerApi.startProcess"]?.[localVarOperationServerIndex]?.url;
            return (axios) => createRequestFunction(localVarAxiosArgs, globalAxios)(axios);
        },
    };
};

/**
 * StartProcessControllerApi - factory interface
 * @export
 */
export const StartProcessControllerApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StartProcessControllerApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadForm(options?: any): AxiosPromise<LoadData200Response> {
            return localVarFp.loadForm(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess(body: object, options?: any): AxiosPromise<MessageDto> {
            return localVarFp.startProcess(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StartProcessControllerApi - object-oriented interface
 * @export
 * @class StartProcessControllerApi
 * @extends {BaseAPI}
 */
export class StartProcessControllerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartProcessControllerApi
     */
    public loadForm(options?: RawAxiosRequestConfig) {
        return StartProcessControllerApiFp(this.configuration).loadForm(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartProcessControllerApi
     */
    public startProcess(body: object, options?: RawAxiosRequestConfig) {
        return StartProcessControllerApiFp(this.configuration).startProcess(body, options).then((request) => request(this.axios, this.basePath));
    }
}



